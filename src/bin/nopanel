#!/bin/bash
# noPanel main entry point
# Â© Ernesto N. Carrea / https://www.nopanel.cc

NOPANEL_VERSION=1.0

# Get correct paths from current script
pushd . > /dev/null
NOPANEL_BIN="${BASH_SOURCE[0]}"
if ([ -h "${NOPANEL_BIN}" ]); then
  while([ -h "${NOPANEL_BIN}" ]); do cd `dirname "$NOPANEL_BIN"`;
  NOPANEL_BIN=`readlink "${NOPANEL_BIN}"`; done
fi
cd `dirname ${NOPANEL_BIN}` > /dev/null
NOPANEL_BIN=`pwd`;
popd  > /dev/null

NOPANEL_PREFIX="$(dirname "$NOPANEL_BIN")"
if [[ -f "$NOPANEL_PREFIX/lib/osal.inc" ]]; then
    # Development, mostly
    NOPANEL_LIB=$NOPANEL_PREFIX/lib
    NOPANEL_DATA=$NOPANEL_PREFIX/../share
else
    # Production
    NOPANEL_LIB=/usr/local/nopanel
    NOPANEL_DATA=/usr/share/nopanel
fi
NOPANEL_LIB_CLI=$NOPANEL_LIB/cli
NOPANEL_STATE=/var/lib/nopanel
NOPANEL_LOG=/var/log/nopanel
NOPANEL_ETC=/etc/nopanel
NOPANEL_HOME=/home

[ "$NOPANEL_DEBUG" ] && OSAL_DEBUG=1

source $NOPANEL_LIB/osal.inc
source $NOPANEL_LIB/main.inc
NOPANEL_RECURSION_LEVEL=0

nopanel() {
    ((NOPANEL_RECURSION_LEVEL+=1))

    if [[ -z "$@" ]]; then
        nplib_command_output 'error' "noPanel: command missing. Try '${0} help' for more information."
        ((NOPANEL_RECURSION_LEVEL-=1))
        return 1
    fi

    # parse command line parameters
    source $NOPANEL_LIB/params.inc

    # basic check user
    nplib_check_user

    if [ $cmd_file ]; then
        # actually run command
        if [ "$NOPANEL_DEBUG" ]; then
            echo "Command file          : $cmd_file"
            echo "Command type          : $cmd_type"
            echo "Command function name : nopanel_${cmd_name}()"
            echo "Remaining arguments   : $@"
            echo "Parameters used       : $params"
            echo "Parameter values      : "
            for param in $params; do
                echo "    --$param ${!param}"
            done
            echo ""
            echo "*** Now the command itself:"
            echo ""
        fi

        if [ "$cmd_type" = 'not-found' ]; then
            nplib_command_output 'error' "Unrecognized command: $@ (was ok until '$cmd_file')"
        elif [ "$cmd_type" = 'include' ]; then
            nplib_require $cmd_file
            nopanel_$cmd_name $@
        elif [ "$cmd_type" = 'dir' ]; then
            # Found to dir level, but no file. Assume 'help' command
            if [ -f "$NOPANEL_LIB/${cmd_file}/help" ]; then
                nplib_require "$NOPANEL_LIB/${cmd_file}/help"
                cmd_name_help="${cmd_name}_help"
                nopanel_$cmd_name_help
            fi
        else
            $cmd_file $@
        fi
    else
        nplib_command_output 'error' "Unrecognized command: $@"
        ((NOPANEL_RECURSION_LEVEL-=1))
        return 1
    fi

    ((NOPANEL_RECURSION_LEVEL-=1))
}

# If this files is _not_ being sourced, act immediately
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    nopanel $@
fi