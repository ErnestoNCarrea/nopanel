#!/bin/bash

if [[ -z "$NOPANEL_VERSION" ]]; then
    echo "This file should not be called without the proper environment. Use nopanel CLI instead."
    exit 1
fi

nopanel_init() {
    nplib_auto_elevate
    nplib_command_echo "Initializing noPanel version $NOPANEL_VERSION"

    # Add a general group for normal users and admins
    if [ -z "$(grep ^nopanel-users: /etc/group)" ]; then
        groupadd --system "nopanel-users"
    fi
    if [ -z "$(grep ^nopanel-admins: /etc/group)" ]; then
        groupadd --system "nopanel-admins"
    fi

    mkdir -p $NOPANEL_STATE $NOPANEL_ETC $NOPANEL_LOG
    chmod 0770 $NOPANEL_STATE $NOPANEL_ETC $NOPANEL_LOG
    chown root:nopanel-admins $NOPANEL_ETC $NOPANEL_LOG
    chmod g+rs $NOPANEL_ETC $NOPANEL_LOG

    # Initialize missing configuration files to empty json
    for FILE in nopanel.json modules.json users.json web-domains.json mail-domains.json databases.json
    do
        [[ -s "$NOPANEL_ETC/$FILE" ]] || echo '{}' > "$NOPANEL_ETC/$FILE"
        chmod 0660 $NOPANEL_ETC/$FILE
        chown root:nopanel-admins $NOPANEL_ETC/$FILE
    done

    nplib_command_echo " - Installing template files"
    nplib_install_template_files "etc/*" "/etc/"

    # merge .json.dist into .json files (will not overwrite any .json value)
    for FILE in /etc/nopanel/*.json.dist
    do
        local tmpfile=$(mktemp)
        DST_FILE=${FILE%.*} # file without .dist
        jq -s ".[0] * .[1]" $FILE $DST_FILE > "$tmpfile" && (chown --reference=$DST_FILE $tmpfile; chmod --reference=$DST_FILE $tmpfile; mv "$tmpfile" "$DST_FILE")
    done

    if [ "$OS_BASE" = 'rhel' ]; then
        nplib_command_echo " - Enabling EPEL repository"
        osal_package_preinstall > /dev/null 2>&1
        osal_package_install epel-release > /dev/null 2>&1
    fi

    nplib_command_output 'ok' 'noPanel ready'
}

# If this files is _not_ being sourced, act immediately
if [ "${BASH_SOURCE[0]}" == "${0}" ]; then
    npctl $@
fi